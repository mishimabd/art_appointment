import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup

sections = [
    "–ò–≥—Ä–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ üé∏",
    "–ò–≥—Ä–∞ –Ω–∞ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ üéπ",
    "–®–∞—Ö–º–∞—Ç—ã ‚ôüÔ∏è",
    "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è 1–° üíº",
    "–ô–æ–≥–∞ üßò",
    "–¢–∞–Ω—Ü—ã üíÉ",
    "–†–∏—Å–æ–≤–∞–Ω–∏–µ üé®",
    "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è üì∏",
    "–ö—É–ª–∏–Ω–∞—Ä–∏—è üç≥"
]

addresses = [
    "–£–ª—ã –î–∞–ª–∞, 43",
    "–ú–∞–Ω–≥–∏–ª–∏–∫ –ï–ª, 25",
    "–ö—É–π—à–∏ –î–∏–Ω–∞, 5",
    "–ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∞–±–∞–Ω–±–∞–π –ë–∞—Ç—ã—Ä–∞, 50"
]

times = [
    "09:00-11:00",
    "11:00-13:00",
    "13:00-15:00",
    "15:00-17:00",
    "17:00-19:00",
    "19:00-21:00"
]

payment_methods = [
    "Kaspi üí≥",
    "Halyk üí≥"
]


async def section_selection(update: Update, context):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å —Å–µ–∫—Ü–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton(section, callback_data=f"section_{section}")] for section in sections
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é:", reply_markup=reply_markup)


async def button_click(update: Update, context):
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–µ–∫—Ü–∏—é, –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞
    if query.data.startswith("section_"):
        selected_section = query.data.split("_")[1]
        context.user_data['selected_section'] = selected_section  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –∞–¥—Ä–µ—Å–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(address, callback_data=f"address_{address}")] for address in addresses
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ü–∏—é: {selected_section}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ:",
            reply_markup=reply_markup
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞–¥—Ä–µ—Å, –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    elif query.data.startswith("address_"):
        selected_address = query.data.split("_")[1]
        context.user_data['selected_address'] = selected_address  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
        selected_section = context.user_data.get('selected_section', '—Å–µ–∫—Ü–∏—è')

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        keyboard = [
            [InlineKeyboardButton(time, callback_data=f"time_{time}")] for time in times
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ü–∏—é: {selected_section}\n–ê–¥—Ä–µ—Å: {selected_address}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=reply_markup
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è, –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    elif query.data.startswith("time_"):
        selected_time = query.data.split("_")[1]
        context.user_data['selected_time'] = selected_time  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        selected_address = context.user_data.get('selected_address', '–∞–¥—Ä–µ—Å')
        selected_section = context.user_data.get('selected_section', '—Å–µ–∫—Ü–∏—è')

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton(method, callback_data=f"payment_{method}")] for method in payment_methods
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ü–∏—é: {selected_section}\n–ê–¥—Ä–µ—Å: {selected_address}\n–í—Ä–µ–º—è: {selected_time}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=reply_markup
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    elif query.data.startswith("payment_"):
        selected_payment = query.data.split("_")[1]
        context.user_data['selected_payment'] = selected_payment  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        selected_time = context.user_data.get('selected_time', '–≤—Ä–µ–º—è')
        selected_address = context.user_data.get('selected_address', '–∞–¥—Ä–µ—Å')
        selected_section = context.user_data.get('selected_section', '—Å–µ–∫—Ü–∏—è')

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = [
            [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await query.message.reply_text(
            f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–µ–∫—Ü–∏—é '{selected_section}' –ø–æ –∞–¥—Ä–µ—Å—É: {selected_address} –Ω–∞ {selected_time}.\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {selected_payment}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=reply_markup
        )


# Function to handle incoming contacts
async def contact_handler(update: Update, context):
    contact = update.message.contact
    phone_number = contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    context.user_data['phone_number'] = phone_number

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    selected_payment = context.user_data.get('selected_payment', '—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
    selected_time = context.user_data.get('selected_time', '–≤—Ä–µ–º—è')
    selected_address = context.user_data.get('selected_address', '–∞–¥—Ä–µ—Å')
    selected_section = context.user_data.get('selected_section', '—Å–µ–∫—Ü–∏—è')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–µ–∫—Ü–∏—é '{selected_section}' –ø–æ –∞–¥—Ä–µ—Å—É: {selected_address} –Ω–∞ {selected_time}.\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {selected_payment}.\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏."
    )

    # –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(3)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    buttons = [
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∫—Ü–∏—é ‚úíÔ∏è")],
        [KeyboardButton("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üìñ")],
        [KeyboardButton("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è")],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! üéâ\n–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –∫—É—Ä—Å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. üòä",
        reply_markup=reply_markup
    )