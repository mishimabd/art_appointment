import asyncio
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler, MessageHandler, Application
import asyncpg

payment_methods = [
    "Kaspi üí≥",
    "Halyk üí≥"
]


async def fetch_sections_from_db():
    conn = await asyncpg.connect(user='postgres', password='Lg26y0M@x',
                                 database='talant', host='91.147.92.32')
    sections = await conn.fetch("SELECT name, free_times, address FROM sections")
    await conn.close()
    return sections


async def section_selection(update: Update, context: CallbackContext):
    sections_data = await fetch_sections_from_db()

    keyboard = [
        [InlineKeyboardButton(section['name'], callback_data=f"section_{section['name']}")]
        for section in sections_data
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é:", reply_markup=reply_markup)


async def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("section_"):
        selected_section_name = query.data.split("_")[1]
        context.user_data['selected_section'] = selected_section_name

        conn = await asyncpg.connect(user='postgres', password='postgres',
                                     database='talant', host='91.147.92.32')
        section_data = await conn.fetchrow("SELECT address, free_times FROM sections WHERE name=$1",
                                           selected_section_name)
        await conn.close()

        if section_data:
            addresses = section_data['address']
            times = section_data['free_times']
            context.user_data['times'] = times  # Store times for later use

            keyboard = [
                [InlineKeyboardButton(address, callback_data=f"address_{address}")] for address in addresses
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ü–∏—é: {selected_section_name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å, –≥–¥–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ:",
                reply_markup=reply_markup
            )

    elif query.data.startswith("address_"):
        selected_address = query.data.split("_")[1]
        context.user_data['selected_address'] = selected_address
        selected_section = context.user_data.get('selected_section', '—Å–µ–∫—Ü–∏—è')

        times = context.user_data.get('times', [])  # Retrieve times from user data
        keyboard = [
            [InlineKeyboardButton(time, callback_data=f"time_{time}")] for time in times
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ü–∏—é: {selected_section}\n–ê–¥—Ä–µ—Å: {selected_address}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=reply_markup
        )

    elif query.data.startswith("time_"):
        selected_time = query.data.split("_")[1]
        context.user_data['selected_time'] = selected_time
        selected_address = context.user_data.get('selected_address', '–∞–¥—Ä–µ—Å')
        selected_section = context.user_data.get('selected_section', '—Å–µ–∫—Ü–∏—è')

        keyboard = [
            [InlineKeyboardButton(method, callback_data=f"payment_{method}")] for method in payment_methods
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ü–∏—é: {selected_section}\n–ê–¥—Ä–µ—Å: {selected_address}\n–í—Ä–µ–º—è: {selected_time}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=reply_markup
        )

    elif query.data.startswith("payment_"):
        selected_payment = query.data.split("_")[1]
        context.user_data['selected_payment'] = selected_payment
        selected_time = context.user_data.get('selected_time', '–≤—Ä–µ–º—è')
        selected_address = context.user_data.get('selected_address', '–∞–¥—Ä–µ—Å')
        selected_section = context.user_data.get('selected_section', '—Å–µ–∫—Ü–∏—è')

        keyboard = [
            [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await query.message.reply_text(
            f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–µ–∫—Ü–∏—é '{selected_section}' –ø–æ –∞–¥—Ä–µ—Å—É: {selected_address} –Ω–∞ {selected_time}.\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {selected_payment}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=reply_markup
        )


async def contact_handler(update: Update, context: CallbackContext):
    contact = update.message.contact
    phone_number = contact.phone_number
    student_user_id = update.message.from_user.id  # Get the user ID of the student
    student_name = update.message.from_user.first_name  # Get the student's first name

    selected_payment = context.user_data.get('selected_payment', '—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
    selected_time = context.user_data.get('selected_time', '–≤—Ä–µ–º—è')
    selected_address = context.user_data.get('selected_address', '–∞–¥—Ä–µ—Å')
    selected_section = context.user_data.get('selected_section', '—Å–µ–∫—Ü–∏—è')

    # Build the confirmation message
    confirmation_message = (
        f"–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–µ–∫—Ü–∏—é '{selected_section}' –ø–æ –∞–¥—Ä–µ—Å—É: {selected_address} –Ω–∞ {selected_time}.\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {selected_payment}.\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏."
    )

    # Connect to the database
    conn = await asyncpg.connect(user='postgres', password='postgres',
                                 database='talant', host='91.147.92.32')

    # Fetch the teacher_id and user_id of the teacher from the sections and teachers tables
    section_data = await conn.fetchrow("SELECT teacher_id FROM sections WHERE name=$1",
                                       selected_section)
    teacher_id = section_data['teacher_id'] if section_data else None

    # Insert the application data into the application table
    await conn.execute("""
        INSERT INTO applications (message, teacher_id, timestamp)
        VALUES ($1, $2, $3)
    """, confirmation_message, teacher_id, datetime.now())

    # Close the database connection
    await conn.close()

    # Send confirmation message to user (student)
    await update.message.reply_text(confirmation_message)

    # Notify the teacher about the new application
    if teacher_id:
        # Create a hyperlink to the student's chat
        chat_link = f"<a href='tg://user?id={student_user_id}'>{student_name}</a>"
        teacher_notification = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ–∫—Ü–∏—é '{selected_section}' –ø–æ –∞–¥—Ä–µ—Å—É {selected_address} –Ω–∞ –≤—Ä–µ–º—è {selected_time}.\n"
            f"–°—Ç—É–¥–µ–Ω—Ç: {chat_link} (ID: {student_user_id}).\n"
            f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {selected_payment}.\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞: {phone_number}."
        )
        await context.bot.send_message(chat_id=teacher_id, text=teacher_notification, parse_mode='HTML')

    # Provide additional options to the student
    await asyncio.sleep(3)

    buttons = [
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∫—Ü–∏—é ‚úíÔ∏è")],
        [KeyboardButton("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üìñ")],
        [KeyboardButton("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è")],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! üéâ\n–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –∫—É—Ä—Å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º. üòä",
        reply_markup=reply_markup
    )
